{
  // Конфигурация компилятора TypeScript для приложения
  // Этот файл определяет настройки TypeScript для клиентской части приложения
  "compilerOptions": {
    // Целевая версия ECMAScript (ES2020)
    // Определяет в какую версию JavaScript компилировать TypeScript код
    "target": "ES2020",
    // Использование современного синтаксиса для полей класса
    // Включение нового стандарта для объявления полей класса
    "useDefineForClassFields": true,
    // Подключаемые библиотеки типов
    // Определяет какие типы TypeScript будут доступны глобально
    "lib": [
      "ES2020", // Типы для ECMAScript 2020 (современные возможности JavaScript)
      "DOM", // Типы для Document Object Model (браузерные API)
      "DOM.Iterable" // Типы для итерируемых объектов DOM (NodeList, HTMLCollection и т.д.)
    ],
    // Система модулей (ESNext - самая современная)
    // Использование нативных ES модулей (import/export)
    "module": "ESNext",
    // Пропуск проверки типов в файлах деклараций (.d.ts)
    // Ускоряет компиляцию, пропуская проверку типов в файлах определений
    "skipLibCheck": true,
    /* Режим работы с бандлерами (Vite) */
    // Стратегия разрешения модулей для бандлеров
    // Оптимизировано для работы с современными сборщиками (Vite, Webpack, Rollup)
    "moduleResolution": "bundler",
    // Разрешение импорта TypeScript расширений (.ts, .tsx)
    // Позволяет импортировать файлы TypeScript без указания расширения
    "allowImportingTsExtensions": true,
    // Обеспечение работы с изолированными модулями
    // Гарантирует, что каждый файл может быть скомпилирован независимо
    "isolatedModules": true,
    // Принудительное определение модулей
    // Автоматически определяет файлы как модули ES
    "moduleDetection": "force",
    // Не генерировать файлы на выходе (бандлер сам занимается сборкой)
    // TypeScript только проверяет типы, сборку выполняет Vite
    "noEmit": true,
    // Режим JSX трансформации (современный React JSX)
    // Использование нового синтаксиса JSX без необходимости импорта React
    "jsx": "react-jsx",
    /* Настройки путей (Path mapping) */
    // Базовая директория для разрешения путей
    // Все относительные пути вычисляются относительно этой директории
    "baseUrl": ".",
    // Алиасы для путей импорта
    // Создание коротких псевдонимов для длинных путей
    "paths": {
      "@/*": [
        "src/*"
      ] // Алиас @ для src директории (например: @/components/Button)
    },
    /* Настройки линтинга и строгости */
    // Включение всех строгих проверок TypeScript
    // Максимальная строгость проверки типов для повышения качества кода
    "strict": true,
    // Ошибка при неиспользуемых локальных переменных
    // Запрещает объявление переменных, которые нигде не используются
    "noUnusedLocals": true,
    // Ошибка при неиспользуемых параметрах функций
    // Запрещает неиспользуемые параметры в функциях
    "noUnusedParameters": true,
    // Ошибка при пропущенных case в switch statements
    // Требует обработки всех возможных case в switch выражениях
    "noFallthroughCasesInSwitch": true
  },
  // Включение файлов для обработки TypeScript (только src директория)
  // TypeScript будет проверять только файлы в папке src и ее подпапках
  "include": [
    "src" // Все файлы в директории src и ее поддиректориях
  ]
}
// ================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
// ================================
/*
1. НАЗНАЧЕНИЕ ФАЙЛА tsconfig.app.json:
   - Конфигурация TypeScript для клиентской части приложения
   - Определяет правила компиляции и проверки типов для браузерного кода
   - Работает в связке с Vite как основным сборщиком

2. СТРАТЕГИЯ КОМПИЛЯЦИИ:
   - "noEmit": true - TypeScript только проверяет типы, не генерируя файлы
   - Сборку выполняет Vite, используя esbuild для трансформации TypeScript
   - Это ускоряет процесс разработки благодаря более быстрой компиляции

3. СОВРЕМЕННЫЙ JavaScript/TypeScript:
   - ES2020 - использование современных возможностей языка
   - ESNext модули - нативная поддержка import/export
   - Современный JSX синтаксис - автоматическое подключение React

4. СИСТЕМА ТИПОВ:
   - lib: подключение актуальных типов для браузера и JavaScript
   - strict: максимальная строгость для предотвращения ошибок
   - Проверки неиспользуемого кода - поддержание чистоты кодовой базы

5. ИНТЕГРАЦИЯ С VITE:
   - moduleResolution: "bundler" - оптимизация для современных сборщиков
   - allowImportingTsExtensions - поддержка импорта .ts/.tsx файлов
   - isolatedModules - совместимость с инкрементальной компиляцией

6. АЛИАСЫ ПУТЕЙ:
   - "@/*" → "src/*" - упрощение импортов
   - Избавляет от относительных путей вроде "../../../components"
   - Улучшает читаемость и поддерживаемость кода

7. КАЧЕСТВО КОДА:
   - Строгие проверки предотвращают распространенные ошибки
   - Обязательная обработка всех case в switch выражениях
   - Запрет неиспользуемых переменных и параметров

8. ПРОИЗВОДИТЕЛЬНОСТЬ РАЗРАБОТКИ:
   - Пропуск проверки .d.ts файлов ускоряет компиляцию
   - Современные настройки обеспечивают быструю сборку
   - Горячая перезагрузка работает с TypeScript файлами

9. СОВМЕСТИМОСТЬ С React:
   - "jsx": "react-jsx" - автоматическое подключение React для JSX
   - Не требует явного импорта React в каждом файле с JSX
   - Поддержка всех возможностей современного React

10. ОГРАНИЧЕНИЕ ОБЛАСТИ ПРОВЕРКИ:
    - "include": ["src"] - проверяются только файлы приложения
    - Игнорируются файлы настроек, документации и сторонние библиотеки
    - Ускоряет процесс проверки типов во время разработки
*/
// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================