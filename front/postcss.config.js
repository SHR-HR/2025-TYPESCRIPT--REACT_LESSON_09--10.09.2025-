// Экспорт конфигурации PostCSS по умолчанию
// PostCSS - это инструмент для преобразования CSS с помощью JavaScript-плагинов
// Этот файл определяет, какие плагины и как будут обрабатывать CSS-файлы
export default {
  // Настройки плагинов PostCSS
  // Объект, где ключи - имена плагинов, значения - их конфигурации
  plugins: {
    // Плагин Tailwind CSS - утилитарный CSS-фреймворк
    // Преобразует классы Tailwind в чистый CSS
    // {} - пустой объект конфигурации (используются настройки по умолчанию)
    tailwindcss: {},

    // Плагин Autoprefixer - автоматически добавляет вендорные префиксы к CSS-свойствам
    // Обеспечивает кроссбраузерную совместимость (webkit, moz, ms, o префиксы)
    // {} - пустой объект конфигурации (используются настройки по умолчанию)
    autoprefixer: {},
  },
};


// ================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
// ================================

/*
1. НАЗНАЧЕНИЕ ФАЙЛА postcss.config.js:
   - Конфигурационный файл для PostCSS - инструмента постобработки CSS
   - Определяет последовательность применения плагинов к CSS-файлам
   - Интегрируется с сборщиками (Vite, Webpack) для обработки стилей

2. POSTCSS КАК ИНСТРУМЕНТ:
   - Не является препроцессором как Sass/Less, а инструментом трансформации CSS
   - Работает с готовым CSS, применяя различные преобразования
   - Основан на плагинной архитектуре - функциональность определяется плагинами

3. ПЛАГИН TAILWINDCSS:
   - Обрабатывает утилитарные классы Tailwind (@apply, @tailwind директивы)
   - Генерирует итоговый CSS файл только с используемыми классами
   - Удаляет неиспользуемые стили для уменьшения размера файла
   - Пустой объект конфигурации {} означает использование настроек по умолчанию

4. ПЛАГИН AUTOPREFIXER:
   - Автоматически добавляет вендорные префиксы к CSS свойствам
   - Например: transform → -webkit-transform, -ms-transform
   - Основан на данных с caniuse.com - актуальная информация о поддержке браузерами
   - Обеспечивает кроссбраузерную совместимость без ручного написания префиксов

5. ПОРЯДОК ВЫПОЛНЕНИЯ ПЛАГИНОВ:
   - Плагины выполняются последовательно в порядке их объявления
   - Сначала tailwindcss обрабатывает утилитарные классы
   - Затем autoprefixer добавляет префиксы к получившемуся CSS

6. ИНТЕГРАЦИЯ С VITE:
   - Vite автоматически обнаруживает и использует postcss.config.js
   - Обработка CSS происходит во время разработки и сборки
   - Горячая перезагрузка сохраняет примененные трансформации

7. КОНФИГУРАЦИЯ ПЛАГИНОВ:
   - Пустой объект {} - использование настроек по умолчанию
   - Можно передавать объект с настройками для кастомизации поведения
   - Например: { autoprefixer: { grid: true } } для включения grid-префиксов

8. ПРЕИМУЩЕСТВА ТАКОЙ НАСТРОЙКИ:
   - Автоматическая оптимизация CSS во время сборки
   - Не нужно вручную добавлять вендорные префиксы
   - Дерево shaking - удаление неиспользуемых стилей Tailwind
   - Современный CSS с обратной совместимостью

9. РАБОЧИЙ ПРОЦЕСС РАЗРАБОТКИ:
   - Разработчик пишет CSS с классами Tailwind и современными свойствами
   - PostCSS обрабатывает файлы во время сборки
   - На выходе - оптимизированный CSS с префиксами для всех браузеров

10. ЗНАЧЕНИЕ ДЛЯ ПРОИЗВОДИТЕЛЬНОСТИ:
    - Уменьшение размера итогового CSS файла
    - Улучшение производительности за счет удаления мертвого кода
    - Гарантия кроссбраузерной совместимости
    - Автоматизация рутинных задач по CSS обработке
*/


// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================
