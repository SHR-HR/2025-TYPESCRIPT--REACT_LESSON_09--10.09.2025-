// Импорт необходимых модулей для настройки ESLint
// Базовые конфигурации ESLint для JavaScript
import js from '@eslint/js';

// Коллекция глобальных переменных для разных сред (браузер, node.js и т.д.)
import globals from 'globals';

// Плагин для правил React Hooks (правила использования useState, useEffect и других хуков)
import reactHooks from 'eslint-plugin-react-hooks';

// Плагин для поддержки React Refresh (Hot Module Replacement - горячее обновление модулей)
import reactRefresh from 'eslint-plugin-react-refresh';

// Плагин для TypeScript поддержки в ESLint (позволяет линтить TypeScript код)
import tseslint from 'typescript-eslint';

// Экспорт конфигурации ESLint по умолчанию
// Функция config из typescript-eslint создает конечную конфигурацию
export default tseslint.config(
  // Первая конфигурация: настройки игнорирования файлов
  // Этот объект определяет какие файлы и папки ESLint должен игнорировать
  {
    // Массив путей и шаблонов для игнорирования
    ignores: ['dist'] // Игнорирование папки dist (собранные файлы для production)
  },

  // Вторая конфигурация: основные правила для TypeScript/React файлов
  // Этот объект содержит все настройки линтинга для TypeScript и React
  {
    // Расширение базовых конфигураций
    // Массив конфигураций, которые наследуются и расширяются
    extends: [
      // Рекомендуемые правила для JavaScript от ESLint
      js.configs.recommended,

      // Рекомендуемые правила для TypeScript (распаковываем массив с помощью spread оператора ...)
      // configs.recommended возвращает массив конфигураций, поэтому используем spread
      ...tseslint.configs.recommended
    ],

    // Применение правил только к определенным файлам
    // Массив шаблонов файлов, к которым применяется эта конфигурация
    files: ['**/*.{ts,tsx}'], // Все файлы с расширениями .ts и .tsx в любых поддиректориях
    // ** - любая поддиректория рекурсивно
    // * - любое имя файла
    // {ts,tsx} - расширения .ts или .tsx

    // Настройки языка и окружения
    // Определяет параметры JavaScript/TypeScript окружения
    languageOptions: {
      // Версия ECMAScript (ES2020 - соответствует стандарту 2020 года)
      ecmaVersion: 2020,

      // Глобальные переменные браузера (window, document, console, localStorage и т.д.)
      // globals.browser предоставляет все стандартные браузерные глобальные переменные
      globals: globals.browser
    },

    // Подключение плагинов ESLint
    // Объект, где ключи - имена плагинов, значения - импортированные модули плагинов
    plugins: {
      // Плагин для правил использования React Hooks (useState, useEffect, etc.)
      'react-hooks': reactHooks,

      // Плагин для поддержки React Refresh (горячее обновление модулей без потери состояния)
      'react-refresh': reactRefresh
    },

    // Настройка конкретных правил линтинга
    // Объект, где ключи - имена правил, значения - настройки этих правил
    rules: {
      // Включение всех рекомендуемых правил из react-hooks плагина
      // Spread оператор (...) копирует все правила из reactHooks.configs.recommended.rules
      ...reactHooks.configs.recommended.rules,

      // Правило для React Refresh: разрешает экспорт только компонентов
      // Это помогает избежать проблем с Hot Module Replacement (горячей заменой модулей)
      'react-refresh/only-export-components': [
        // Уровень предупреждения (warning) вместо ошибки (error)
        // Предупреждения отображаются желтым цветом, но не прерывают сборку
        'warn',

        // Опции для правила (дополнительные настройки)
        {
          // Разрешение экспорта констант (кроме компонентов)
          // Позволяет экспортировать константы без предупреждений
          allowConstantExport: true
        }
      ]
    }
  }
);


// ================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
// ================================

/*
1. НАЗНАЧЕНИЕ ФАЙЛА eslint.config.js:
   - Это конфигурационный файл для ESLint - линтера кода JavaScript/TypeScript
   - Определяет правила и настройки для проверки качества кода
   - Заменяет старый формат .eslintrc.js в новых версиях ESLint

2. СТРУКТУРА КОНФИГУРАЦИИ:
   - Конфигурация состоит из нескольких объектов, объединенных в массив
   - Каждый объект может иметь свои настройки для разных типов файлов
   - Порядок объектов важен - последующие конфигурации могут переопределять предыдущие

3. ТИПЫ КОНФИГУРАЦИЙ:

   А. КОНФИГУРАЦИЯ ИГНОРИРОВАНИЯ:
      - Определяет файлы и папки, которые ESLint должен пропускать
      - dist/ - папка сборки, не нуждается в линтинге
      - Экономит время и ресурсы при проверке кода

   Б. ОСНОВНАЯ КОНФИГУРАЦИЯ:
      - extends: наследование от рекомендованных конфигураций
      - files: применение только к TypeScript файлам (.ts, .tsx)
      - languageOptions: настройки языка и глобальных переменных
      - plugins: подключение дополнительных функциональностей
      - rules: конкретные правила и их настройки

4. ВАЖНОСТЬ ПЛАГИНОВ:

   А. REACT-HOOKS:
      - Следит за правильным использованием React хуков
      - Предотвращает распространенные ошибки (нарушение правил хуков)
      - Например: ensures hooks are called at the top level

   Б. REACT-REFRESH:
      - Обеспечивает корректную работу Hot Module Replacement
      - Предупреждает о проблемах, которые могут сломать HMR
      - Особенно важен для разработки с быстрым обновлением кода

5. УРОВНИ ПРАВИЛ:
   - 'off' или 0 - правило выключено
   - 'warn' или 1 - правило как предупреждение (не прерывает выполнение)
   - 'error' или 2 - правило как ошибка (прерывает выполнение)

6. ECMASCRIPT ВЕРСИЯ:
   - ecmaVersion: 2020 - поддерживает современные возможности JavaScript
   - Включает: optional chaining (?.), nullish coalescing (??), и другие ES2020 фичи

7. ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ:
   - globals.browser - предоставляет все стандартные браузерные API
   - Избавляет от ошибок "is not defined" для window, document, console и т.д.

8. ТИПЫ ФАЙЛОВ:
   - .ts - TypeScript файлы
   - .tsx - TypeScript файлы с JSX (React компоненты)

9. ЗНАЧЕНИЕ ДЛЯ РАЗРАБОТКИ:
   - Обеспечивает единый стиль кода в команде
   - Обнаруживает ошибки на раннем этапе
   - Улучшает качество и поддерживаемость кода
   - Интегрируется с IDE для подсветки ошибок в реальном времени

10. ИНТЕГРАЦИЯ С СИСТЕМОЙ СБОРКИ:
    - Обычно запускается перед коммитом (pre-commit hooks)
    - Может быть интегрирован в CI/CD pipeline
    - Предотвращает попадание плохого кода в репозиторий
*/


// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================

