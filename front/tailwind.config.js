/** 
 * JSDoc комментарий для TypeScript - указывает тип конфигурации Tailwind CSS
 * @type {import('tailwindcss').Config} 
 */
// Экспорт конфигурации Tailwind CSS по умолчанию
export default {
  // Настройка режима темной темы
  // теперь класс 'dark:' будет работать и при [data-theme="dark"] на <html>
  // Массив указывает способ определения темной темы: через CSS класс и data-атрибут
  darkMode: ['class', '[data-theme="dark"]'],

  // Массив путей к файлам, в которых используются классы Tailwind CSS
  // Tailwind будет анализировать только эти файлы для tree-shaking (удаления неиспользуемых стилей)
  content: [
    // Включение основного HTML файла
    './index.html',
    // Включение всех файлов в папке src и ее подпапках с указанными расширениями
    './src/**/*.{js,ts,jsx,tsx}',
    // ** - любая вложенность подпапок
    // * - любое имя файла
    // {js,ts,jsx,tsx} - расширения JavaScript и TypeScript файлов
  ],

  // Объект темы для расширения или переопределения стандартных стилей Tailwind
  theme: {
    // Раздел extend позволяет добавлять новые стили без переопределения существующих
    extend: {},
    // Пустой объект означает использование стандартной темы Tailwind без изменений
  },

  // Массив плагинов Tailwind CSS
  // Плагины добавляют дополнительные функциональности и утилиты
  plugins: [],
  // Пустой массив означает отсутствие дополнительных плагинов
}

// ================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
// ================================

/*
1. НАЗНАЧЕНИЕ ФАЙЛА tailwind.config.js:
   - Конфигурационный файл для фреймворка Tailwind CSS
   - Определяет кастомизацию и настройки Tailwind
   - Контролирует генерацию итогового CSS файла

2. СТРУКТУРА КОНФИГУРАЦИИ:

   А. DARKMODE:
      - Настраивает механизм определения темной темы
      - ['class', '[data-theme="dark"]'] - двойной способ определения:
        * Через CSS класс (например, <html class="dark">)
        * Через data-атрибут (например, <html data-theme="dark">)
      - Позволяет использовать префикс dark: в классах Tailwind

   Б. CONTENT:
      - Критически важная настройка для производительности
      - Указывает пути к файлам, где используются классы Tailwind
      - Tailwind анализирует эти файлы и генерирует только используемые стили
      - Tree-shaking: удаляет неиспользуемые классы из финального CSS

   В. THEME:
      - Позволяет кастомизировать дизайн-систему Tailwind
      - extend: {} - безопасное добавление новых стилей без перезаписи стандартных
      - Можно добавлять: цвета, шрифты, размеры, анимации и т.д.

   Г. PLUGINS:
      - Подключает дополнительные плагины для расширения функциональности
      - Например: typography, forms, aspect-ratio и другие
      - Пустой массив - используется только ядро Tailwind

3. МЕХАНИЗМ DARK MODE:
   - Префикс dark: применяет стили только когда выполняется условие
   - Например: dark:bg-gray-800 - темный фон только в темной теме
   - Условие: наличие класса 'dark' ИЛИ атрибута [data-theme="dark"] на <html>

4. ОПТИМИЗАЦИЯ РАЗМЕРА CSS:
   - Анализ content файлов позволяет удалить ~90% неиспользуемых стилей
   - Финальный CSS содержит только классы, фактически используемые в проекте
   - Значительно уменьшает размер стилей для production

5. РАСШИРЕНИЕ ТЕМЫ:
   - extend позволяет добавлять кастомные значения без потери стандартных
   - Например: extend: { colors: { brand: '#123456' } } добавит цвет brand
   - Стандартные цвета Tailwind останутся доступными

6. ИНТЕГРАЦИЯ С POSTCSS:
   - Tailwind работает как плагин PostCSS
   - Обрабатывает CSS файлы во время сборки проекта
   - Генерирует финальные стили на основе этой конфигурации

7. ДЛЯ РАЗРАБОТКИ:
   - Во время разработки генерируются все возможные классы
   - В production включается только tree-shaking и минификация
   - Горячая перезагрузка отслеживает изменения в content файлах

8. ЗНАЧЕНИЕ ДЛЯ ДИЗАЙН-СИСТЕМЫ:
   - Обеспечивает консистентность дизайна во всем приложении
   - Предопределенная система цветов, отступов, размеров
   - Легкая кастомизация под бренд проекта

9. СОВМЕСТИМОСТЬ С React/TypeScript:
   - Полная поддержка JSX/TSX синтаксиса
   - Автодополнение классов в IDE с помощью плагинов
   - TypeScript типы для кастомных конфигураций

10. BEST PRACTICES:
    - Всегда указывать точные пути в content для оптимального tree-shaking
    - Использовать extend для кастомизации вместо перезаписи theme
    - Настраивать darkMode в соответствии с механизмом переключения тем в проекте
*/

// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================