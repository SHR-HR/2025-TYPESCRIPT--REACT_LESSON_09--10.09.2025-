# Файл .gitignore - определяет какие файлы и папки игнорировать в системе контроля версий Git
# Игнорирование лог-файлов
logs                   # Папка с логами приложения и сервера
*.log                  # Все файлы с расширением .log (логи различных компонентов)
npm-debug.log*         # Логи отладки npm (пакетный менеджер Node.js)
yarn-debug.log*        # Логи отладки Yarn (альтернативный пакетный менеджер)
yarn-error.log*        # Логи ошибок Yarn (ошибки при установке зависимостей)
pnpm-debug.log*        # Логи отладки pnpm (еще один пакетный менеджер)
lerna-debug.log*       # Логи отладки Lerna (инструмент для управления монорепозиториями)

# Игнорирование зависимостей и сборок
node_modules           # Папка с node.js зависимостями (устанавливается через npm install)
dist                   # Папка собранного приложения (production сборка создается Vite)
dist-ssr               # Папка для server-side rendering сборки (рендеринг на стороне сервера)
*.local                # Все локальные файлы (например, .env.local с настройками окружения)

# Игнорирование файлов и папок редакторов кода
.vscode/*              # Все файлы настроек Visual Studio Code (конфигурации рабочей области)
!.vscode/extensions.json # Исключение: файл рекомендованных расширений VSCode (должен быть в репозитории)
.idea                  # Папка настроек JetBrains IDE (WebStorm, IntelliJ IDEA)
.DS_Store              # Файл метаданных macOS (создается системой для хранения настроек папок)
*.suo                  # Файлы настроек Solution Options (Visual Studio - пользовательские настройки)
*.ntvs*                # Файлы проектов Node.js Tools for Visual Studio (расширение для Node.js)
*.njsproj              # Файлы проектов Node.js (проектные файлы Visual Studio)
*.sln                  # Файлы решений Visual Studio (solution files)
*.sw?                  # Файлы свопов (vim, vi редакторы - временные файлы редактирования)

# Игнорирование файлов окружения
.env                   # Файл переменных окружения (может содержать чувствительные данные)
.env.local             # Локальный файл переменных окружения (индивидуальные настройки разработчика)

# ================================
# ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
# ================================

# /*
# 1. НАЗНАЧЕНИЕ ФАЙЛА .gitignore:
#    - Определяет шаблоны файлов и папок, которые Git должен игнорировать
#    - Предотвращает попадание в репозиторий ненужных или конфиденциальных файлов
#    - Обеспечивает чистоту репозитория и безопасность данных

# 2. СИНТАКСИС GITIGNORE:
#    - # - символ комментария
#    - / в конце - указание на папку
#    - * - wildcard (любые символы)
#    - ? - любой одиночный символ
#    - ! - инверсия (исключение из правил игнорирования)
#    - ** - рекурсивное совпадение любых подпапок

# 3. КАТЕГОРИИ ИГНОРИРУЕМЫХ ФАЙЛОВ:

#    А. ЛОГ-ФАЙЛЫ:
#       - Логи создаются во время разработки и отладки
#       - Имеют временный характер и не нужны в репозитории
#       - Могут содержать чувствительную информацию

#    Б. ЗАВИСИМОСТИ И СБОРКИ:
#       - node_modules/ устанавливается через npm install/yarn
#       - dist/ и dist-ssr/ генерируются автоматически при сборке
#       - Эти папки занимают много места и специфичны для каждой среды

#    В. ФАЙЛЫ РЕДАКТОРОВ:
#       - Настройки IDE индивидуальны для каждого разработчика
#       - Могут конфликтовать при работе в команде
#       - Исключение: extensions.json - рекомендованные расширения для команды

#    Г. СИСТЕМНЫЕ ФАЙЛЫ:
#       - .DS_Store - создается macOS для хранения атрибутов папок
#       - *.sw? - временные файлы редакторов vim/vi

#    Д. ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ:
#       - Содержат чувствительные данные (пароли, ключи API)
#       - Должны настраиваться индивидуально для каждого окружения
#       - Предотвращают утечку конфиденциальной информации

# 4. БЕЗОПАСНОСТЬ:
#    - Защищает от случайного коммита паролей и ключей
#    - Предотвращает конфликты настроек между разработчиками
#    - Сохраняет конфиденциальность данных окружения

# 5. ПРОИЗВОДИТЕЛЬНОСТЬ:
#    - Уменьшает размер репозитория
#    - Ускоряет операции Git (add, commit, push)
#    - Упрощает процесс клонирования проекта

# 6. ЛУЧШИЕ ПРАКТИКИ:
#    - Всегда добавляйте .gitignore в корень проекта
#    - Регулярно обновляйте при добавлении новых инструментов
#    - Используйте .gitkeep для пустых папок, которые нужно сохранить в репозитории
#    - Проверяйте статус игнорируемых файлов командой git status --ignored

# 7. ОСОБЕННОСТИ СИНТАКСИСА:
#    - Шаблоны применяются рекурсивно ко всем подпапкам
#    - Порядок правил важен (последующие правила могут переопределять предыдущие)
#    - Локальный .gitignore имеет приоритет над глобальным

# 8. ДЛЯ КОМАНДНОЙ РАБОТЫ:
#    - Обеспечивает единую среду разработки для всех участников
#    - Предотвращает конфликты в настройках IDE
#    - Сохраняет чистоту истории коммитов
# */

# // =============================================================================
# // КОНЕЦ ФАЙЛА
# // =============================================================================