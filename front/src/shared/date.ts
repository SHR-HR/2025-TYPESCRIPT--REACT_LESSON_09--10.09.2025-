// Функции для работы с датами и временем

// Функция для парсинга даты из API
export function parseApiDate(value: string | Date): Date {
    // Если значение уже является объектом Date, возвращаем его без изменений
    if (value instanceof Date) return value;

    // Проверяем, содержит ли строка временную зону (Z или смещение в формате ±HH:MM)
    const hasTZ = /[zZ]|([+-]\d{2}:\d{2})$/.test(value);

    // Если временная зона отсутствует, добавляем 'Z' (UTC) в конец строки
    // Это гарантирует корректное преобразование в локальное время браузера
    return new Date(hasTZ ? value : value + 'Z');
}

// Вспомогательная функция для форматирования чисел: добавляет ведущий ноль к числам меньше 10
function two(n: number) {
    // Преобразуем число в строку и добавляем ведущий ноль если нужно
    return String(n).padStart(2, '0');
}

// Функция для форматирования временной метки в удобный для пользователя локальный формат
export function formatLocalTimestamp(input: string | Date): string {
    // Парсим входное значение в объект Date с учетом временных зон
    const d = parseApiDate(input);

    // Получаем текущую дату и время
    const now = new Date();

    // Проверяем, совпадает ли день с текущим днем
    const sameDay =
        d.getFullYear() === now.getFullYear() &&      // Тот же год
        d.getMonth() === now.getMonth() &&            // Тот же месяц
        d.getDate() === now.getDate();                // Тот же день

    // Создаем объект Date для вчерашнего дня
    const yest = new Date(now);
    yest.setDate(now.getDate() - 1); // Устанавливаем вчерашнюю дату

    // Проверяем, совпадает ли день со вчерашним днем
    const sameYest =
        d.getFullYear() === yest.getFullYear() &&     // Тот же год что и у вчера
        d.getMonth() === yest.getMonth() &&           // Тот же месяц что и у вчера
        d.getDate() === yest.getDate();               // Тот же день что и у вчера

    // Форматируем часы и минуты с ведущими нулями
    const h = two(d.getHours());    // Часы (00-23)
    const m = two(d.getMinutes());  // Минуты (00-59)

    // Возвращаем отформатированную строку в зависимости от условий:

    // Если дата совпадает с сегодняшним днем
    if (sameDay) return `сегодня в ${h}:${m}`;

    // Если дата совпадает со вчерашним днем
    if (sameYest) return `вчера в ${h}:${m}`;

    // Для всех остальных случаев: полная дата в формате ДД.ММ.ГГГГ ЧЧ:ММ
    return `${two(d.getDate())}.${two(d.getMonth() + 1)}.${d.getFullYear()} ${h}:${m}`;
}

/* ================= ПОЯСНЕНИЯ К КОММЕНТАРИЯМ =================

1. НАЗНАЧЕНИЕ МОДУЛЯ:
   - Модуль содержит утилиты для работы с датами и временем
   - Предназначен для унификации обработки дат во всем приложении
   - Обеспечивает корректное отображение временных меток для пользователя

2. ФУНКЦИЯ PARSEAPIDATE:
   - Решает проблему парсинга дат из API которые могут приходить без указания временной зоны
   - Регулярное выражение проверяет наличие временной зоны в формате Z или ±HH:MM
   - Добавление 'Z' гарантирует что дата будет правильно интерпретирована как UTC

3. ВСПОМОГАТЕЛЬНАЯ ФУНКЦИЯ TWO:
   - Вспомогательная функция для форматирования чисел
   - padStart(2, '0') добавляет ведущий ноль к числам меньше 10
   - Обеспечивает единообразный двузначный формат для часов, минут, дней и месяцев

4. ФУНКЦИЯ FORMATLOCALTIMESTAMP:
   - Преобразует дату в удобный для пользователя формат на русском языке
   - Использует относительные обозначения "сегодня" и "вчера" для близких дат
   - Для более старых дат показывает полную дату в формате ДД.ММ.ГГГГ ЧЧ:ММ

5. ЛОГИКА ОПРЕДЕЛЕНИЯ ДНЕЙ:
   - sameDay: проверяет совпадение года, месяца и дня с текущей датой
   - sameYest: создает дату вчерашнего дня и проверяет совпадение
   - Используются отдельные проверки вместо вычисления разницы в днях для точности

6. ФОРМАТИРОВАНИЕ ДАТЫ:
   - Месяцы в JavaScript нумеруются с 0 (январь = 0), поэтому добавляем +1
   - Российский формат даты: ДД.ММ.ГГГГ вместо ММ/ДД/ГГГГ
   - 24-часовой формат времени вместо 12-часового AM/PM

7. ЛОКАЛИЗАЦИЯ:
   - Текстовые значения "сегодня", "вчера" и "в" на русском языке
   - Соответствует ожиданиям русскоязычных пользователей
   - Использует принятые в России форматы отображения даты и времени

8. ОБРАБОТКА ГРАНИЧНЫХ СЛУЧАЕВ:
   - Корректно обрабатывает переход через месяц и год
   - Учитывает високосные годы и разное количество дней в месяцах
   - Работает с датами в прошлом и будущем
*/


// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================

