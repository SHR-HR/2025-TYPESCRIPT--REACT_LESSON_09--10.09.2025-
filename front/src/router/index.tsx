// Импорт функции lazy из React для ленивой загрузки компонентов
import { lazy } from 'react';
// Импорт функций createHashRouter и redirect из react-router-dom для создания маршрутизации
import { createHashRouter, redirect } from 'react-router-dom';
// Импорт apiClient из модуля HTTP API для выполнения запросов
import { apiClient } from '@/api/http';
// Импорт компонента Layout для использования в качестве обертки страниц
import Layout from '@/components/Layout';

// Ленивая загрузка компонента страницы постов
const PostsPage = lazy(() => import('@/features/posts/PostsPage'));
// Ленивая загрузка компонента страницы редактирования поста
const EditPostPage = lazy(() => import('@/features/posts/EditPostPage'));
// Ленивая загрузка компонента страницы деталей поста
const PostDetails = lazy(() => import('@/features/posts/PostDetailsPage'));
// Ленивая загрузка компонента страницы студентов журнала
const StudentsPage = lazy(() => import('@/features/journal/StudentsPage')); // твой журнал
// Ленивая загрузка компонента страницы списка пользователей
const UsersListPage = lazy(() => import('@/features/users/UsersListPage'));
// Ленивая загрузка компонента страницы создания пользователя
const UsersCreatePage = lazy(() => import('@/features/users/UsersCreatePage')); // НОВОЕ
// Ленивая загрузка компонента страницы деталей пользователя
const UserDetailPage = lazy(() => import('@/features/users/UserDetailPage'));
// Ленивая загрузка компонента страницы "О нас"
const AboutPage = lazy(() => import('@/pages/AboutPage'));
// Ленивая загрузка компонента страницы контактов
const ContactsPage = lazy(() => import('@/pages/ContactsPage'));

// Асинхронная функция-загрузчик для проверки аутентификации
async function authLoader() {
   try {
      // Выполнение тестового запроса к API для проверки доступности
      await apiClient.get('', { params: { _limit: 1, _start: 0 } });
      // Возврат null если запрос успешен
      return null;
   } catch {
      // Перенаправление на главную страницу в случае ошибки
      throw redirect('/');
   }
}

// Создание и экспорт маршрутизатора с конфигурацией маршрутов
export const router = createHashRouter([
   // Маршрут для главной страницы (список постов)
   { path: '/', element: <Layout><PostsPage /></Layout> },
   // Маршрут для страницы журнала студентов
   { path: '/journal', element: <Layout><StudentsPage /></Layout> },

   // Маршрут для страницы списка пользователей
   { path: '/users', element: <Layout><UsersListPage /></Layout> },
   // Маршрут для страницы создания нового пользователя
   { path: '/users/new', element: <Layout><UsersCreatePage /></Layout> },   // ← создание
   // Маршрут для страницы деталей пользователя (с динамическим параметром id)
   { path: '/users/:id', element: <Layout><UserDetailPage /></Layout> },

   // Маршрут для страницы деталей поста (с динамическим параметром id)
   { path: '/posts/:id', element: <Layout><PostDetails /></Layout> },
   // Маршрут для страницы редактирования поста с проверкой аутентификации
   { path: '/edit/:id', loader: authLoader, element: <Layout><EditPostPage /></Layout> },
   // Маршрут для страницы "О нас"
   { path: '/about', element: <Layout><AboutPage /></Layout> },
   // Маршрут для страницы контактов
   { path: '/contacts', element: <Layout><ContactsPage /></Layout> },
   // Маршрут для всех остальных путей (перенаправление на главную страницу)
   { path: '*', element: <Layout><PostsPage /></Layout> },
]);

/* ================= ПОЯСНЕНИЯ К КОММЕНТАРИЯМ =================

1. ЛЕНИВАЯ ЗАГРУЗКА КОМПОНЕНТОВ:
   - Функция lazy() позволяет разделить код и загружать компоненты только при необходимости
   - Уменьшает начальный размер бандла приложения
   - Ускоряет первоначальную загрузку приложения

2. ТИП МАРШРУТИЗАЦИИ:
   - createHashRouter использует хэш-роутинг (# в URL)
   - Подходит для статического хостинга где нет серверной конфигурации
   - Альтернатива createBrowserRouter которая требует серверной настройки

3. СТРУКТУРА МАРШРУТОВ:
   - Каждый маршрут имеет path (путь) и element (React элемент)
   - Динамические параметры обозначаются через : (например :id)
   - Layout компонент оборачивает каждую страницу для единообразия

4. ЗАГРУЗЧИКИ (LOADERS):
   - authLoader выполняет проверку аутентификации перед рендерингом страницы
   - Выполняет API запрос для проверки доступности сервера
   - В случае ошибки перенаправляет на главную страницу

5. ОБРАБОТКА ОШИБОЧНЫХ ПУТЕЙ:
   - Маршрут '*' обрабатывает все непредусмотренные пути
   - Перенаправляет на главную страницу вместо показа ошибки 404

6. ИЕРАРХИЯ КОМПОНЕНТОВ:
   - Layout обеспечивает общую структуру страниц (шапка, меню, подвал)
   - Вложенные компоненты страниц рендерятся внутри Layout

7. ДИНАМИЧЕСКИЕ ПАРАМЕТРЫ:
   - :id в путях позволяет передавать идентификаторы конкретных ресурсов
   - Используется для страниц деталей и редактирования

8. ГРУППИРОВКА МАРШРУТОВ:
   - Маршруты сгруппированы по функциональности (посты, пользователи, страницы)
   - Логическая организация упрощает навигацию по коду
*/

// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================
