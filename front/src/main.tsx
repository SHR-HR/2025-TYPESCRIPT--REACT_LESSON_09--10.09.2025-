// Импорт компонента StrictMode из библиотеки React
// StrictMode - это инструмент для обнаружения потенциальных проблем в приложении
import { StrictMode } from 'react';

// Импорт функции createRoot из библиотеки react-dom/client
// createRoot используется для создания корневого элемента React приложения
import { createRoot } from 'react-dom/client';

// Импорт корневого компонента приложения App из файла App.tsx
// App является главным компонентом, содержащим всю структуру приложения
import App from './App.tsx';

// Импорт глобальных стилей из файла base.scss
// Стили применяются ко всему приложению и задают базовое оформление
import '@/styles/base.scss';

// Импорт компонента Provider из библиотеки react-redux
// Provider делает хранилище Redux доступным для всех компонентов приложения
import { Provider } from 'react-redux';

// Импорт хранилища store из файла store.ts
// store содержит состояние приложения и логику его обновления
import { store } from '@/store/store';

// Создание корневого элемента React приложения
// document.getElementById('root')! находит DOM-элемент с id="root"
// Восклицательный знак (!) указывает TypeScript, что элемент точно существует
createRoot(document.getElementById('root')!).render(
  // Оборачивание приложения в StrictMode для разработки
  // StrictMode помогает выявлять проблемы во время разработки
  <StrictMode>
    {/* Оборачивание приложения в Provider для доступа к Redux хранилищу */}
    {/* Пропс store передает хранилище всем компонентам приложения */}
    <Provider store={store}>
      {/* Рендеринг главного компонента приложения */}
      <App />
    </Provider>
  </StrictMode>
);


// ================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
// ================================

/*
1. Назначение файла main.tsx:
   - Это точка входа (entry point) React приложения
   - Здесь происходит первоначальная настройка и рендеринг приложения
   - Файл отвечает за подключение всех основных зависимостей

2. StrictMode:
   - Включает дополнительные проверки и предупреждения для приложения
   - Обнаруживает устаревшие методы и потенциальные проблемы
   - Работает только в режиме разработки, не влияет на production

3. React DOM и createRoot:
   - Современный API для рендеринга React приложений
   - Заменяет устаревший ReactDOM.render()
   - Поддерживает конкурентные функции React

4. Структура импортов:
   - Сначала импортируются внешние зависимости (библиотеки)
   - Затем внутренние компоненты и модули
   - В конце глобальные стили

5. Redux Integration:
   - Provider связывает React с Redux
   - store содержит все состояние приложения
   - Позволяет управлять состоянием централизованно

6. Глобальные стили:
   - base.scss содержит CSS переменные, сбросы и базовые стили
   - Импортируется один раз на все приложение
   - Задает общее оформление и тему

7. TypeScript нотация:
   - ! в document.getElementById('root')! - non-null assertion operator
   - Указывает TypeScript, что элемент не может быть null
   - Избегает необходимости проверки на null

8. Иерархия компонентов:
   - StrictMode → Provider → App → остальное приложение
   - Каждый уровень добавляет свою функциональность

9. Процесс рендеринга:
   - createRoot создает корневой контейнер
   - .render() запускает процесс отрисовки приложения
   - React монтирует компоненты в DOM

10. Масштабируемость:
    - Такая структура позволяет легко добавлять новые провайдеры
    - Позволяет подключать дополнительные библиотеки
    - Обеспечивает чистую и организованную архитектуру
*/


// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================