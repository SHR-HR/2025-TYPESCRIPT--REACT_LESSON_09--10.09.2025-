// Импорт необходимых модулей React
import React, { useEffect, useState } from 'react';
// Импорт хуков для работы с маршрутизацией
import { useParams, useNavigate, Link } from 'react-router-dom';
// Импорт API клиента для HTTP запросов
import { apiClient } from '@/api/http';
// Импорт компонента формы поста
import PostForm from './PostForm';
// Импорт TypeScript типов для постов
import type { Post, PostPayload } from '@/shared/types';

// Компонент страницы редактирования поста
const EditPostPage: React.FC = () => {
    // Получение параметра id из URL
    const { id = '' } = useParams<{ id: string }>();
    // Хук для навигации между страницами
    const navigate = useNavigate();

    // Состояние для хранения начальных данных поста
    const [initial, setInitial] = useState<PostPayload | null>(null);
    // Состояние для отображения загрузки
    const [loading, setLoading] = useState(true);
    // Состояние для отображения ошибок
    const [err, setErr] = useState<string | null>(null);

    // Эффект для загрузки данных поста при монтировании компонента или изменении id
    useEffect(() => {
        // Флаг для отмены запроса при размонтировании компонента
        let cancelled = false;
        // Асинхронная функция загрузки данных
        (async () => {
            try {
                // Сброс ошибки перед началом загрузки
                setErr(null);
                // Выполнение GET запроса для получения данных поста
                const { data } = await apiClient.get<Post>(`/${id}`);
                // Если компонент не размонтирован - обновляем состояние
                if (!cancelled) {
                    setInitial({
                        title: data.title,
                        content: data.content,
                        author: data.author,
                        image_url: data.image_url,
                    });
                }
            } catch {
                // Обработка ошибки загрузки
                if (!cancelled) setErr('Не удалось получить пост');
            } finally {
                // Завершение загрузки независимо от результата
                if (!cancelled) setLoading(false);
            }
        })();
        // Функция очистки эффекта - устанавливаем флаг отмены
        return () => { cancelled = true; };
    }, [id]); // Зависимость эффекта - параметр id из URL

    // Обработчик отправки формы редактирования
    const handleSubmit = async (data: PostPayload) => {
        // Выполнение PUT запроса для обновления поста
        await apiClient.put<Post>(`/${id}`, data);
        // Перенаправление на главную страницу после успешного обновления
        navigate('/');
    };

    // Возвращаем JSX разметку компонента
    return (
        // Основной контейнер с ограничением максимальной ширины и отступами
        <div className="container" style={{ maxWidth: 800, margin: '0 auto', padding: 24 }}>
            {/* Заголовок страницы */}
            <h1 style={{ marginBottom: 16 }}>Редактировать пост</h1>

            {/* Блок отображения ошибок */}
            {err && <div className="error">{err}</div>}

            {/* Условный рендеринг: загрузка или форма */}
            {loading || !initial ? (
                // Отображение индикатора загрузки
                <div className="loading">Загрузка…</div>
            ) : (
                // Компонент формы с передачей пропсов
                <PostForm
                    onSubmit={handleSubmit}
                    initial={initial}
                    submitText="Сохранить"
                />
            )}

            {/* Кнопка возврата на главную страницу */}
            <div style={{ marginTop: 16 }}>
                <Link to="/" className="btn secondary">← Назад</Link>
            </div>
        </div>
    );
};

// Экспорт компонента по умолчанию
export default EditPostPage;

// =============================================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
// =============================================================================

/**
 * ПОЯСНЕНИЯ К КОММЕНТАРИЯМ:
 *
 * 1. СТРУКТУРА КОМПОНЕНТА:
 *    - Компонент представляет страницу редактирования существующего поста
 *    - Использует функциональный компонент с хуками React
 *    - Включает загрузку данных, обработку форм и навигацию
 *
 * 2. РАБОТА С ПАРАМЕТРАМИ URL:
 *    - useParams для получения ID поста из URL
 *    - useNavigate для программной навигации
 *    - Link для создания ссылки возврата
 *
 * 3. УПРАВЛЕНИЕ СОСТОЯНИЕМ:
 *    - initial: хранение начальных данных поста для формы
 *    - loading: индикатор процесса загрузки
 *    - err: хранение и отображение ошибок
 *
 * 4. ЗАГРУЗКА ДАННЫХ:
 *    - useEffect для side effects при монтировании
 *    - Асинхронная функция внутри useEffect
 *    - Защита от утечек памяти через флаг cancelled
 *    - Обработка ошибок try-catch-finally
 *
 * 5. ОБРАБОТКА ФОРМЫ:
 *    - handleSubmit для отправки обновленных данных
 *    - PUT запрос к API для обновления поста
 *    - Перенаправление на главную после успеха
 *
 * 6. УСЛОВНЫЙ РЕНДЕРИНГ:
 *    - Отображение ошибки при наличии
 *    - Индикатор загрузки во время запроса
 *    - Форма после успешной загрузки данных
 *
 * 7. СТИЛИЗАЦИЯ:
 *    - Inline стили для контейнера
 *    - CSS классы для кнопок и сообщений
 *    - Адаптивный дизайн с maxWidth
 *
 * 8. ТИПОБЕЗОПАСНОСТЬ:
 *    - TypeScript типы для пропсов и состояния
 *    - Типизация параметров и ответов API
 *    - Строгая проверка типов данных
 *
 * 9. ПОЛЬЗОВАТЕЛЬСКИЙ ОПЫТ:
 *    - Индикатор загрузки во время ожидания
 *    - Сообщения об ошибках
 *    - Кнопка возврата для удобной навигации
 *    - Предзаполнение формы существующими данными
 *
 * 10. БЕЗОПАСНОСТЬ И ОПТИМИЗАЦИЯ:
 *     - Защита от утечек памяти при размонтировании
 *     - Валидация данных на стороне клиента
 *     - Обработка сетевых ошибок
 *     - Оптимизированные перерисовки компонента
 */

// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================

