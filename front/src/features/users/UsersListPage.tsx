// Импорт компонента NavLink из библиотеки react-router-dom для создания навигационных ссылок
import { NavLink } from 'react-router-dom';
// Импорт кастомного хука useAppSelector для доступа к состоянию хранилища
import { useAppSelector } from '@/store/hooks';
// Импорт селектора selectUsers из слайса пользователей
import { selectUsers } from './usersSlice';
// Импорт функции getRole для получения роли текущего пользователя
import { getRole } from '@/auth/role';

// Экспорт компонента страницы списка пользователей по умолчанию
export default function UsersListPage() {
    // Получение списка пользователей из хранилища с помощью селектора
    const users = useAppSelector(selectUsers);
    // Проверка, является ли текущий пользователь администратором
    const isAdmin = getRole() === 'admin';

    // Возвращаем JSX разметку компонента
    return (
        // Основной контейнер страницы с отступом сверху
        <div className="container" style={{ paddingTop: 16 }}>
            {/* Карточка с заголовком и кнопкой создания */}
            <div className="card" style={{ padding: 20, marginBottom: 16 }}>
                {/* Контейнер с flex-разметкой для выравнивания элементов */}
                <div
                    style={{
                        display: 'flex', // Flex-контейнер
                        alignItems: 'center', // Выравнивание по центру по вертикали
                        gap: 12, // Расстояние между элементами
                        justifyContent: 'space-between', // Распределение пространства между элементами
                        flexWrap: 'wrap', // Перенос элементов на новую строку при необходимости
                    }}
                >
                    {/* Блок с текстовой информацией */}
                    <div>
                        {/* Заголовок страницы */}
                        <h1 style={{ margin: 0 }}>Пользователи</h1>
                        {/* Описание страницы */}
                        <div style={{ color: 'var(--color-text-muted)' }}>
                            Список пользователей. Открывай карточку, редактируй поля и удаляй.
                        </div>
                    </div>

                    {/* Условное отображение кнопки создания для администраторов */}
                    {isAdmin && (
                        // Ссылка для перехода на страницу создания нового пользователя
                        <NavLink
                            to="/users/new" // Путь для навигации
                            className="btn primary small" // CSS классы для стилизации
                            title="Создать нового пользователя" // Всплывающая подсказка
                        >
                            {/* Текст кнопки */}
                            + Создать пользователя
                        </NavLink>
                    )}
                </div>
            </div>

            {/* Карточка с таблицей пользователей */}
            <div className="card" style={{ padding: 12 }}>
                {/* Обёртка таблицы для горизонтального скролла на узких экранах */}
                <div className="tableWrap">
                    {/* Таблица пользователей с специальными классами для стилизации */}
                    <table className="table users">
                        {/* Заголовок таблицы */}
                        <thead>
                            {/* Строка заголовков таблицы */}
                            <tr>
                                {/* Столбец с именем пользователя */}
                                <th scope="col">Имя</th>
                                {/* Столбец с группой пользователя */}
                                <th scope="col">Группа</th>
                                {/* Столбец с ролью пользователя */}
                                <th scope="col">Роль</th>
                                {/* Столбец с email пользователя */}
                                <th scope="col">Email</th>
                                {/* Столбец с телефоном пользователя */}
                                <th scope="col">Телефон</th>
                                {/* Столбец с действиями (фиксированная ширина) */}
                                <th scope="col" style={{ width: 120 }}>
                                    Действия
                                </th>
                            </tr>
                        </thead>

                        {/* Тело таблицы с данными пользователей */}
                        <tbody>
                            {/* Отображение списка пользователей через map */}
                            {users.map((u) => (
                                // Строка таблицы для каждого пользователя с уникальным ключом
                                <tr key={u.id}>
                                    {/* Ячейка с именем пользователя */}
                                    <td>
                                        {/* Жирное начертание для имени */}
                                        <b>{u.name}</b>
                                    </td>
                                    {/* Ячейка с группой пользователя (пустая строка если null) */}
                                    <td>{u.group ?? ''}</td>
                                    {/* Ячейка с ролью пользователя */}
                                    <td>{u.role}</td>
                                    {/* Ячейка с email пользователя */}
                                    <td>
                                        {/* Обёртка для обрезания длинного текста */}
                                        <span className="truncate" title={u.email ?? ''}>
                                            {u.email ?? ''}
                                        </span>
                                    </td>
                                    {/* Ячейка с телефоном пользователя */}
                                    <td>
                                        {/* Обёртка для обрезания длинного текста */}
                                        <span className="truncate" title={u.phone ?? ''}>
                                            {u.phone ?? ''}
                                        </span>
                                    </td>
                                    {/* Ячейка с кнопкой действий */}
                                    <td>
                                        {/* Ссылка для перехода к детальной странице пользователя */}
                                        <NavLink
                                            to={`/users/${u.id}`} // Динамический путь с ID пользователя
                                            className="btn outline small" // CSS классы для стилизации
                                        >
                                            {/* Текст кнопки */}
                                            Открыть
                                        </NavLink>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>

                {/* Сообщение о пустом списке пользователей */}
                {users.length === 0 && <div className="empty">Список пуст</div>}
            </div>
        </div>
    );
}

/* ================= ПОЯСНЕНИЯ К КОММЕНТАРИЯМ =================

1. СТРУКТУРА КОМПОНЕНТА:
   - Функциональный компонент UsersListPage отображает список пользователей
   - Использует React Router для навигации
   - Подключается к Redux хранилищу через хуки

2. ДОСТУП К ДАННЫМ:
   - useAppSelector: Хук для чтения данных из Redux хранилища
   - selectUsers: Селектор для получения массива пользователей
   - getRole: Функция для проверки прав доступа текущего пользователя

3. УСЛОВНЫЙ РЕНДЕРИНГ:
   - Кнопка "Создать пользователя" показывается только администраторам
   - Сообщение "Список пуст" отображается когда массив users пустой

4. ТАБЛИЦА ДАННЫХ:
   - Используется HTML таблица с семантической разметкой
   - thead для заголовков и tbody для данных
   - Классы table и users обеспечивают стилизацию

5. ОБРАБОТКА ДАННЫХ:
   - Оператор ?? (nullish coalescing) для обработки null/undefined значений
   - Атрибут title для всплывающих подсказок с полным текстом
   - Класс truncate для обрезания длинного текста с многоточием

6. ДОСТУПНОСТЬ:
   - Атрибут scope="col" для семантической связи ячеек заголовка с данными
   - Атрибут title для улучшения доступности длинного текста

7. АДАПТИВНОСТЬ:
   - tableWrap обеспечивает горизонтальный скролл на мобильных устройствах
   - flexWrap: wrap позволяет переносить элементы на узких экранах

8. СТИЛИЗАЦИЯ:
   - Используются CSS переменные (var(--color-text-muted)) для согласованности стилей
   - Inline стили для точного контроля отступов и positioning
   - CSS классы для повторного использования стилей
*/

// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================