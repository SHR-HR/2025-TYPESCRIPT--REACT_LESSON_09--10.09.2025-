// Импорт необходимых хуков из React
import { useEffect, useState } from 'react';
// Импорт иконок из библиотеки lucide-react
import { Sun, Moon } from 'lucide-react';

// Определение типа для темы: может быть либо 'light' (светлая), либо 'dark' (тёмная)
type T = 'light' | 'dark';

// Экспорт компонента переключения темы по умолчанию
export default function ThemeToggle() {
    // Функция для получения начальной темы из localStorage или системных настроек
    const getInitial = (): T => {
        try {
            // Пытаемся получить сохранённую тему из localStorage
            const saved = localStorage.getItem('theme') as T | null;
            // Если тема валидна (светлая или тёмная), возвращаем её
            if (saved === 'light' || saved === 'dark') return saved;
        } catch {
            // В случае ошибки доступа к localStorage (например, в приватном режиме) игнорируем ошибку
        }
        // Если в localStorage нет темы или произошла ошибка, определяем тему по системным настройкам
        return window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    };

    // Создание состояния для хранения текущей темы с инициализацией через getInitial()
    const [theme, setTheme] = useState<T>(getInitial);

    // Эффект для применения темы к документу и сохранения в localStorage
    useEffect(() => {
        // Получаем корневой элемент документа (html)
        const root = document.documentElement;
        // Если тема тёмная, устанавливаем атрибут data-theme="dark"
        if (theme === 'dark') root.setAttribute('data-theme', 'dark');
        // Если тема светлая, удаляем атрибут data-theme
        else root.removeAttribute('data-theme');
        // Пытаемся сохранить текущую тему в localStorage
        try { localStorage.setItem('theme', theme); } catch {
            // Игнорируем ошибки записи в localStorage
        }
    }, [theme]); // Эффект зависит от изменения темы

    // Возвращаем JSX разметку кнопки переключения темы
    return (
        <button
            type="button" // Указываем тип кнопки (кнопка, а не submit)
            className="btn outline icon" // CSS классы для стилизации кнопки
            // Обработчик клика: переключаем тему на противоположную
            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
            // Всплывающая подсказка с текстом в зависимости от текущей темы
            title={theme === 'dark' ? 'Светлая тема' : 'Тёмная тема'}
            // ARIA атрибут для указания состояния кнопки (нажата/ненажата)
            aria-pressed={theme === 'dark'}
        >
            {/* Отображаем иконку в зависимости от текущей темы */}
            {theme === 'dark' ? <Sun size={18} /> : <Moon size={18} />}
            {/* Отображаем текст кнопки в зависимости от текущей темы */}
            {theme === 'dark' ? 'Светлая' : 'Тёмная'}
        </button>
    );
}

// =============================================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
// =============================================================================

/**
 * ПОЯСНЕНИЯ К КОММЕНТАРИЯМ:
 *
 * 1. Тип T: Определяет строгую типизацию для тем, ограничивая возможные значения только
 *    'light' и 'dark'. Это предотвращает ошибки и обеспечивает типобезопасность.
 *
 * 2. Функция getInitial(): Реализует стратегию определения начальной темы в следующем порядке:
 *    - Попытка чтения из localStorage (пользовательские предпочтения)
 *    - Проверка системных настроек через window.matchMedia
 *    - Fallback на светлую тему если системные настройки недоступны
 *
 * 3. Обработка ошибок: Все операции с localStorage обёрнуты в try-catch для обработки
 *    случаев когда localStorage недоступен (например, в приватном режиме браузера).
 *
 * 4. Хук useEffect: Выполняет побочные эффекты при изменении темы:
 *    - Устанавливает/удаляет атрибут data-theme на корневом элементе документа
 *    - Сохраняет выбранную тему в localStorage для сохранения предпочтений пользователя
 *
 * 5. ARIA атрибуты: aria-pressed улучшает доступность для скринридеров, указывая
 *    состояние переключателя (нажата ли кнопка).
 *
 * 6. Условный рендеринг: В зависимости от текущей темы отображается соответствующая
 *    иконка и текст на кнопке, создавая интуитивно понятный интерфейс.
 *
 * 7. Размер иконок: Фиксированный размер 18px обеспечивает визуальную согласованность
 *    с текстом кнопки и другими элементами интерфейса.
 *
 * 8. Логика переключения: При клике на кнопку тема меняется на противоположную
 *    (dark ↔ light), обеспечивая простой и предсказуемый пользовательский опыт.
 */

// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================
