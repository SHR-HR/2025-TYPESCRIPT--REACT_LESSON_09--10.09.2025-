// Импорт библиотеки axios для выполнения HTTP-запросов
import axios from 'axios';

// =============================================================================
// ФУНКЦИЯ ДЛЯ БЕЗОПАСНОГО ЧТЕНИЯ ПЕРЕМЕННЫХ ОКРУЖЕНИЯ
// =============================================================================

/**
 * Безопасно получает значение переменной окружения с fallback-значением по умолчанию.
 * Выводит предупреждение в консоль если переменная отсутствует или пустая.
 * 
 * @param {keyof ImportMetaEnv} key - Ключ переменной окружения (например, 'VITE_API_URL')
 * @param {string} fallback - Резервное значение, которое будет использовано если переменная не задана
 * @returns {string} Значение переменной окружения или fallback-значение
 * 
 * @ПояснениеККомментариям: Эта функция критически важна для работы приложения в разных окружениях.
 * Она обеспечивает graceful degradation когда переменные окружения не настроены.
 */
function getEnv(key: keyof ImportMetaEnv, fallback: string) {
  // Получаем значение переменной окружения из import.meta.env
  const v = import.meta.env[key];
  // Проверяем что значение является строкой и не пустое
  if (typeof v === 'string' && v.trim() !== '') return v;
  // Выводим предупреждение в консоль если переменная отсутствует
  console.warn(`[ENV] ${key} is missing. Fallback is used: ${fallback}`);
  // Возвращаем fallback-значение если переменная не задана или пустая
  return fallback;
}

// =============================================================================
// КОНСТАНТЫ И ПЕРЕМЕННЫЕ API
// =============================================================================

/** 
 * Дефолтные значения на случай отсутствия .env.local (удобно для демо) 
 * @constant {Object} DEFAULTS
 * @property {string} URL - Базовый URL API по умолчанию
 * @property {string} USER - Имя пользователя для аутентификации по умолчанию
 * @property {string} PASS - Пароль для аутентификации по умолчанию
 * 
 * @ПояснениеККомментариям: Константа 'as const' обеспечивает типобезопасность и предотвращает
 * случайные изменения значений. Закомментированный URL показывает альтернативный вариант.
 */
const DEFAULTS = {
  // URL: 'http://localhost:8000/api/posts',
  URL: '/api/posts',
  USER: 'admin',
  PASS: '123',
} as const;

/**
 * Базовый URL для endpoints постов после обработки и нормализации
 * Удаляет trailing slashes для consistency
 * 
 * @ПояснениеККомментариям: replace(/\/+$/, '') удаляет все слэши в конце строки чтобы
 * избежать проблем с двойными слэшами в URL
 */
const POSTS_URL = getEnv('VITE_API_URL', DEFAULTS.URL).replace(/\/+$/, '');

/** 
 * Вычисляем корневой URL API удаляя конечный /posts из URL постов
 * Это нужно для доступа к другим endpoints API кроме постов
 * 
 * @ПояснениеККомментариям: Регулярное выражение /\/posts\/?$/i ищет "/posts" в конце строки
 * независимо от регистра и наличия trailing slash
 */
const API_ROOT = POSTS_URL.replace(/\/posts\/?$/i, '');

/**
 * Имя пользователя для HTTP Basic Authentication
 * Берется из переменных окружения или использует дефолтное значение
 */
const API_USER = getEnv('VITE_API_USER', DEFAULTS.USER);

/**
 * Пароль для HTTP Basic Authentication  
 * Берется из переменных окружения или использует дефолтное значение
 */
const API_PASS = getEnv('VITE_API_PASS', DEFAULTS.PASS);

// =============================================================================
// AXIOS CLIENT INSTANCES
// =============================================================================

/** 
 * Axios клиент настроенный специально для работы с endpoints постов (/api/posts)
 * Используется для всех операций CRUD с постами: создание, чтение, обновление, удаление
 * 
 * @constant {AxiosInstance} apiClient
 * @property {string} baseURL - Базовый URL для всех запросов этого клиента
 * @property {Object} auth - Учетные данные для HTTP Basic Authentication
 * @property {Object} headers - Заголовки по умолчанию для всех запросов
 * @property {number} timeout - Таймаут запроса в миллисекундах (5 секунд)
 * 
 * @ПояснениеККомментариям: Разделение клиентов на apiClient и apiRoot позволяет иметь
 * разные конфигурации для разных групп endpoints
 */
export const apiClient = axios.create({
  baseURL: POSTS_URL,
  auth: { username: API_USER, password: API_PASS },
  headers: { 'Content-Type': 'application/json' },
  timeout: 5000,
});

/** 
 * Axios клиент настроенный для работы с корневым URL API (/api)
 * Используется для операций не связанных напрямую с постами: загрузка файлов, 
 * другие API endpoints которые не входят в /posts
 * 
 * @constant {AxiosInstance} apiRoot
 * @property {number} timeout - Увеличенный таймаут (10 секунд) для операций с файлами
 * 
 * @ПояснениеККомментариям: Больший таймаут для apiRoot обусловлен тем что операции с 
 * загрузкой файлов могут занимать больше времени
 */
export const apiRoot = axios.create({
  baseURL: API_ROOT,
  auth: { username: API_USER, password: API_PASS },
  timeout: 10000,
});

// =============================================================================
// ERROR HANDLING INTERCEPTOR
// =============================================================================

/**
 * Универсальный обработчик ошибок для axios interceptors
 * Централизованно обрабатывает все ошибки API запросов: логирует, форматирует,
 * предоставляет полезную информацию для debugging
 * 
 * @param {any} e - Объект ошибки от axios
 * @returns {Promise<never>} Promise который всегда rejected с оригинальной ошибкой
 * 
 * @ПояснениеККомментариям: Interceptor перехватывает ошибки на уровне всего приложения
 * что позволяет избежать дублирования кода обработки ошибок в каждом компоненте
 */
const onError = (e: any) => {
  // Извлекаем сообщение об ошибке из различных возможных мест:
  // 1. Из response.data.detail (стандарт для REST API)
  // 2. Из стандартного message ошибки
  // 3. String representation как последний fallback
  const msg = e?.response?.data?.detail || e?.message || String(e);

  // Получаем HTTP метод и URL запроса для детального логирования
  const method = (e?.config?.method || 'get').toUpperCase();
  const url = e?.config?.url ?? '(unknown)';

  // Логируем ошибку в консоль с детальной информацией
  console.error(`[API ERROR] ${method} ${url} ->`, msg);

  // Специальная обработка для ошибок аутентификации (401 Unauthorized)
  // Выводим дополнительное предупреждение с подсказкой по troubleshooting
  if (e?.response?.status === 401) {
    console.warn('Unauthorized (401). Проверьте логин/пароль в .env.local');
  }

  // Пробрасываем ошибку дальше для обработки в коде приложения
  // Это позволяет компонентам перехватывать и обрабатывать ошибки специфическим образом
  return Promise.reject(e);
};

// =============================================================================
// INTERCEPTORS SETUP
// =============================================================================

/**
 * Подключаем обработчик ошибок к обоим axios клиентам
 * onError будет вызываться для любых response с статусом ошибки (4xx, 5xx)
 * 
 * @ПояснениеККомментариям: interceptors.response.use принимает два callback:
 * 1. Для успешных responses (здесь просто пропускаем response дальше)
 * 2. Для erroneous responses (здесь обрабатываем через onError)
 */
apiClient.interceptors.response.use((r) => r, onError);
apiRoot.interceptors.response.use((r) => r, onError);

// =============================================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
// =============================================================================

/**
 * ПОЯСНЕНИЯ К КОММЕНТАРИЯМ:
 *
 * 1. СТРУКТУРА ФАЙЛА:
 *    - Файл разделен на логические секции с помощью комментариев-разделителей
 *    - Каждая секция отвечает за определенный аспект работы с API
 *    - Используется JSDoc документация для всех функций и констант
 *
 * 2. ФУНКЦИЯ GETENV():
 *    - Обеспечивает безопасное чтение переменных окружения
 *    - Выводит предупреждения в консоль при отсутствии переменных
 *    - Обеспечивает graceful degradation через fallback-значения
 *    - Критически важна для multi-environment deployment
 *
 * 3. КОНСТАНТА DEFAULTS:
 *    - Содержит значения по умолчанию для демонстрационных целей
 *    - 'as const' обеспечивает типобезопасность TypeScript
 *    - Закомментированные значения показывают альтернативные варианты
 *
 * 4. РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ:
 *    - replace(/\/+$/, '') - удаляет trailing slashes для нормализации URL
 *    - replace(/\/posts\/?$/i, '') - извлекает корневой URL API
 *    - Флаги 'i' обеспечивают регистронезависимый поиск
 *
 * 5. РАЗДЕЛЕНИЕ КЛИЕНТОВ:
 *    - apiClient: специализирован для работы с endpoints постов
 *    - apiRoot: для общих операций и загрузки файлов
 *    - Разные таймауты: 5s для JSON API, 10s для операций с файлами
 *
 * 6. HTTP BASIC AUTHENTICATION:
 *    - Учетные данные берутся из переменных окружения
 *    - Используются для аутентификации на сервере
 *    - Добавляются автоматически ко всем запросам
 *
 * 7. ОБРАБОТЧИК ОШИБОК ONERROR:
 *    - Централизованная обработка всех API ошибок
 *    - Извлекает сообщения об ошибках из разных источников
 *    - Детально логирует ошибки с информацией о методе и URL
 *    - Специальная обработка для ошибок 401 (Unauthorized)
 *
 * 8. INTERCEPTORS:
 *    - Перехватывают responses на уровне приложения
 *    - Позволяют обрабатывать ошибки в одном месте
 *    - Упрощают код компонентов избавляя от дублирования
 *
 * 9. ТАЙМАУТЫ:
 *    - 5000ms (5 секунд) для обычных API запросов
 *    - 10000ms (10 секунд) для операций с загрузкой файлов
 *    - Защита от зависания запросов
 *
 * 10. ТИПОБЕЗОПАСНОСТЬ:
 *     - TypeScript обеспечивает проверку типов
 *     - Все константы имеют явные типы
 *     - Функции имеют аннотации возвращаемых типов
 */

// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================
