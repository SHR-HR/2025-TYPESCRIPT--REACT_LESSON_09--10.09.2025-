// Импорт функции defineConfig из Vite для типизированной конфигурации
import { defineConfig } from 'vite'

// Импорт плагина React для Vite (обеспечивает поддержку React и горячую перезагрузку)
import react from '@vitejs/plugin-react'

// Импорт функции resolve из модуля path для работы с путями файловой системы
import { resolve } from 'path'

// Импорт плагина для поддержки путей из tsconfig.json в Vite
import tsconfigPaths from 'vite-tsconfig-paths'

// Экспорт конфигурации Vite по умолчанию с использованием defineConfig
export default defineConfig({
  // Массив плагинов Vite, которые будут использоваться в проекте
  plugins: [
    // Плагин для автоматического разрешения путей из tsconfig.json
    tsconfigPaths(),

    // Плагин React для поддержки JSX/TSX, горячей перезагрузки и других возможностей React
    react(),
  ],

  // Настройки разрешения модулей и путей
  resolve: {
    // Объект алиасов для путей импорта
    alias: {
      // Алиас '@' который указывает на папку src в корне проекта
      '@': resolve(__dirname, './src'),
      // __dirname - текущая директория файла
      // resolve - создает абсолютный путь
    },
  },

  // Настройки сервера разработки
  // proxy чтобы в Dev обращаться к /api и /uploads без CORS и без явного http://localhost:8000
  server: {
    // Порт, на котором будет запущен сервер разработки
    port: 5173,

    // Строгая проверка порта (если порт занят, не пытаться использовать другой)
    strictPort: true,

    // Настройки прокси-сервера для перенаправления запросов
    proxy: {
      // Правило для всех запросов начинающихся с /api
      '/api': {
        // Целевой сервер, на который будут перенаправляться запросы
        target: 'http://localhost:8000',

        // Изменение заголовка Origin для обхода CORS ограничений
        changeOrigin: true,
      },

      // Правило для всех запросов начинающихся с /uploads
      '/uploads': {
        // Целевой сервер, на который будут перенаправляться запросы
        target: 'http://localhost:8000',

        // Изменение заголовка Origin для обхода CORS ограничений
        changeOrigin: true,
      },
    },
  },

  // Настройки оптимизации зависимостей
  optimizeDeps: {
    // Массив зависимостей, которые следует исключить из предварительной оптимизации
    exclude: ['lucide-react'],
    // lucide-react - библиотека иконок, которая может иметь проблемы с оптимизацией
  },
})


// ================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
// ================================

/*
1. НАЗНАЧЕНИЕ ФАЙЛА vite.config.ts:
   - Основной конфигурационный файл для сборщика Vite
   - Определяет все настройки сборки, разработки и оптимизации проекта
   - Заменяет собой webpack.config.js в традиционных настройках

2. СТРУКТУРА КОНФИГУРАЦИИ:

   А. PLUGINS:
      - tsconfigPaths(): автоматически подхватывает алиасы из tsconfig.json
      - react(): обеспечивает полную поддержку React с горячей перезагрузкой

   Б. RESOLVE.ALIAS:
      - Создает псевдоним '@' для папки src
      - Позволяет использовать абсолютные импорты вместо относительных
      - Упрощает читаемость и поддерживаемость кода

   В. SERVER.PROXY:
      - Решает проблему CORS (Cross-Origin Resource Sharing) во время разработки
      - Позволяет frontend на localhost:5173 обращаться к backend на localhost:8000
      - Запросы к /api и /uploads прозрачно перенаправляются на backend

   Г. OPTIMIZEDEPS:
      - Исключает проблемные библиотеки из предварительной оптимизации
      - Предотвращает ошибки сборки с определенными зависимостями

3. РАБОЧИЙ ПРОЦЕСС РАЗРАБОТКИ:
   - Сервер разработки запускается на порту 5173
   - Все запросы к API автоматически проксируются на backend
   - Горячая перезагрузка работает для React компонентов и стилей
   - Автоматическая пересборка при изменении кода

4. РЕШЕНИЕ ПРОБЛЕМЫ CORS:
   - Браузер блокирует запросы между разными доменами/портами
   - Прокси скрывает различие в портах (5173 → 8000)
   - Backend видит запросы как приходящие с того же origin

5. ПРЕИМУЩЕСТВА VITE:
   - Мгновенный запуск сервера разработки благодаря esbuild
   - Быстрая горячая перезагрузка (HMR) без полной пересборки
   - Оптимизированная сборка для production с Rollup

6. БЕЗОПАСНОСТЬ:
   - Прокси работает только в режиме разработки
   - В production сборке прокси не включается
   - Алиасы путей компилируются в корректные относительные пути

7. ПРОИЗВОДИТЕЛЬНОСТЬ:
   - Исключение lucide-react из оптимизации ускоряет начальную сборку
   - Предварительная оптимизация зависимостей уменьшает время перезагрузки
   - Нативный ES модули обеспечивают быструю загрузку в браузере

8. СОВМЕСТИМОСТЬ:
   - Полная поддержка TypeScript из коробки
   - Интеграция с React через официальный плагин
   - Поддержка CSS препроцессоров (Sass, Less) и PostCSS

9. НАСТРОЙКА ДЛЯ РАЗНЫХ СРЕД:
   - Разработка: горячая перезагрузка, прокси, подробные ошибки
   - Production: минификация, разделение кода, оптимизация

10. МАСШТАБИРУЕМОСТЬ:
    - Легко добавлять новые плагины и настройки
    - Поддержка многопользовательской разработки
    - Интеграция с другими инструментами экосистемы
*/

// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================

