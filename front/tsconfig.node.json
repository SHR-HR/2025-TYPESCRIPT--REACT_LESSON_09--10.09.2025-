{
  // Конфигурация компилятора TypeScript для Node.js среды (Vite конфигурация и инструменты сборки)
  // Этот файл определяет настройки TypeScript для серверной части и инструментов сборки
  "compilerOptions": {
    // Целевая версия ECMAScript (ES2022 - современная версия для Node.js)
    // Определяет в какую версию JavaScript компилировать TypeScript код для Node.js
    "target": "ES2022",
    // Подключаемые библиотеки типов для Node.js среды
    // Определяет какие типы TypeScript будут доступны глобально для Node.js кода
    "lib": [
      "ES2023" // Типы для ECMAScript 2023 (современные возможности JavaScript для Node.js)
    ],
    // Система модулей (ESNext - самая современная)
    // Использование нативных ES модулей (import/export) для Node.js
    "module": "ESNext",
    // Пропуск проверки типов в файлах деклараций (.d.ts)
    // Ускоряет компиляцию, пропуская проверку типов в файлах определений
    "skipLibCheck": true,
    /* Режим работы с бандлерами (Vite) */
    // Стратегия разрешения модулей для бандлеров
    // Оптимизировано для работы с современными сборщиками (Vite)
    "moduleResolution": "bundler",
    // Разрешение импорта TypeScript расширений (.ts, .tsx)
    // Позволяет импортировать файлы TypeScript без указания расширения
    "allowImportingTsExtensions": true,
    // Обеспечение работы с изолированными модулями
    // Гарантирует, что каждый файл может быть скомпилирован независимо
    "isolatedModules": true,
    // Принудительное определение модулей
    // Автоматически определяет файлы как модули ES
    "moduleDetection": "force",
    // Не генерировать файлы на выходе (Vite сам занимается сборкой конфигурации)
    // TypeScript только проверяет типы, сборку выполняет Vite
    "noEmit": true,
    /* Настройки линтинга и строгости */
    // Включение всех строгих проверок TypeScript
    // Максимальная строгость проверки типов для повышения качества кода
    "strict": true,
    // Ошибка при неиспользуемых локальных переменных
    // Запрещает объявление переменных, которые нигде не используются
    "noUnusedLocals": true,
    // Ошибка при неиспользуемых параметрах функций
    // Запрещает неиспользуемые параметры в функциях
    "noUnusedParameters": true,
    // Ошибка при пропущенных case в switch statements
    // Требует обработки всех возможных case в switch выражениях
    "noFallthroughCasesInSwitch": true
  },
  // Включение файлов для обработки TypeScript (только vite.config.ts)
  // TypeScript будет проверять только файл конфигурации Vite
  "include": [
    "vite.config.ts" // Файл конфигурации сборщика Vite
  ]
}
// ================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ
// ================================
/*
1. НАЗНАЧЕНИЕ ФАЙЛА tsconfig.node.json:
   - Конфигурация TypeScript для серверной части и инструментов сборки
   - Определяет правила компиляции и проверки типов для Node.js кода
   - Специализированная конфигурация для Vite и других инструментов сборки

2. ЦЕЛЕВАЯ СРЕДА - NODE.JS:
   - "target": "ES2022" - современные возможности JavaScript поддерживаемые Node.js
   - "lib": ["ES2023"] - типы для последней версии ECMAScript
   - Оптимизировано для среды выполнения Node.js, а не браузера

3. ОСОБЕННОСТИ КОНФИГУРАЦИИ ДЛЯ ИНСТРУМЕНТОВ СБОРКИ:
   - Проверяется только vite.config.ts - основной файл конфигурации Vite
   - Не включает файлы приложения, только инструментальные скрипты
   - Обеспечивает типобезопасность конфигурации сборки

4. СТРАТЕГИЯ КОМПИЛЯЦИИ:
   - "noEmit": true - TypeScript только проверяет типы, не генерируя файлы
   - Vite использует esbuild для обработки конфигурационных файлов
   - Проверка типов выполняется во время разработки и сборки

5. СОВРЕМЕННЫЙ JavaScript ДЛЯ NODE.JS:
   - ES2022/ES2023 - использование современных возможностей языка
   - ESNext модули - нативная поддержка import/export в Node.js
   - Оптимизировано для последних версий Node.js

6. ИНТЕГРАЦИЯ С VITE:
   - moduleResolution: "bundler" - оптимизация для Vite сборщика
   - allowImportingTsExtensions - поддержка импорта .ts файлов в конфигурации
   - isolatedModules - совместимость с инкрементальной компиляцией Vite

7. КАЧЕСТВО КОДА КОНФИГУРАЦИИ:
   - Строгие проверки предотвращают ошибки в конфигурационных файлах
   - Обязательная обработка всех case в switch выражениях
   - Запрет неиспользуемых переменных и параметров

8. ПРОИЗВОДИТЕЛЬНОСТЬ РАЗРАБОТКИ:
   - Ограниченная область проверки (только vite.config.ts) ускоряет компиляцию
   - Пропуск проверки .d.ts файлов уменьшает время анализа
   - Быстрая проверка типов для конфигурационных файлов

9. БЕЗОПАСНОСТЬ И НАДЕЖНОСТЬ:
   - Строгая проверка типов предотвращает ошибки в конфигурации сборки
   - Раннее обнаружение проблем в настройках Vite
   - Гарантия корректной работы инструментов сборки

10. МАСШТАБИРУЕМОСТЬ:
    - Легко добавить другие конфигурационные файлы при необходимости
    - Поддержка дополнительных инструментов и скриптов сборки
    - Единая система типов для всей инфраструктуры проекта
*/
// =============================================================================
// КОНЕЦ ФАЙЛА
// =============================================================================